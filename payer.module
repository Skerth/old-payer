<?php

function payer_init() {
  $module_path = drupal_get_path('module', 'payer');
  drupal_add_css($module_path . '/css/payer.css');
}

/**
 * Implements hook_menu().
 */
function payer_menu() {
  $items = array();

  $items['admin/config/payer'] = array(
    'title' => 'Payer',
    'description' => 'Connected payment methods.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'payer_config_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );
  // –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  $items['admin/config/payer/methods'] = array(
    'title' => 'Methods',             // –Ω–µ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
    'type' => MENU_DEFAULT_LOCAL_TASK, // –ø—É–Ω–∫—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç.–µ. –≤—ã–¥–µ–ª—è—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    'weight' => '-50',
  );
  $items['admin/config/payer/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure Payer.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'payer_config_url_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'weight' => '-49',
  );

  $items['payer'] = array(
    'title' => 'Top up your wallet',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payer_payment'),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è Payer
 **/
function payer_config_page() {
  $existing_methods = payer_get_methods();
  // –®–∞–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  $headers = array(
    array('class' => array('pay-method_status')),
    array('data' => 'Method'),
    array('data' => 'Operations'),
  );

  // –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  $rows = array();

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–º–µ—é—â–∏—Ö—Å—è —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã –≤ –ø–∞–ø–∫–µ "methods"
   */
  foreach($existing_methods as $pay_method) {
    $options = array(
      'config_link' => NULL, // —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã.
      'method_name' => NULL, // —Å–∏—Å—Ç–µ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞.
      'description' => NULL, // –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞.
      'image' => NULL, // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
      'info' => NULL, // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è—Å—è –≤ —Ñ–∞–π–ª–µ .info
      'status' => FALSE, // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
    );

    $options['info'] = drupal_parse_info_file($pay_method->uri);
    $options['method_name'] = $pay_method->name;
    $options['status'] = module_exists($options['method_name']) ? TRUE : FALSE;

    if(!$options['status']) {
      $options['description'] .= '<div class="messages warning">';
      $options['description'] .= t(
        'The payment method &quot;@pay_method&quot; is installed, but it is off. To use the module functionality, enable it on the !page_modules under &quot;Payment&quot;',
        array(
          '@pay_method' => $options['info']['name'],
          '!page_modules' => l(t('modules page'), 'admin/modules'),
        )
      );
      $options['description'] .= '</div>';
      $options['status'] = 'üö´';
    }
    else {
      $options['config_link'] = l('Config', $options['info']['configure']);
      $options['status'] = '‚úÖ';
    }

    $options['image'] = drupal_get_path('module', $options['method_name']) . '/preview.png';

    if(file_exists($options['image'])) {
      $options['image'] = theme('image', array('path' => $options['image']));
    }
    else {
      $options['image'] = NULL;
    }

    $options['description'] .= '<h3>' . $options['info']['name'] . '</h3>';
    $options['description'] .= theme('default', array());;
    $options['description'] .= $options['image'];
    $options['description'] .= '<p>' . $options['info']['description'] . '</p>';

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã—á–µ—Å–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Å—Å–∏–≤ $rows
    $rows[$options['method_name']] = array(
      'data' => array(
        array(
          'data'  => $options['status'],
          'class' => array('pay-method_status')
        ),
        $options['description'],
        $options['config_link'],
      ),
    );
  }

  usort($rows, function($a, $b){
    if($a['data'][0]['data'] === $b['data'][0]['data'])
      return 0;

    return $a['data'][0]['data'] > $b['data'][0]['data'] ? 1 : -1;
  });

  // –°–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  $page_data = array(
    'header' => $headers,
    'rows' => $rows,
    'sticky' => TRUE,
    'empty' => t('No results found'),
    'attributes' => array(),
    'caption' => FALSE,
    'colgroups' => array(),
  );

  return theme(
    'config_page_template',
    array('page_data' => $page_data)
  );
}

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞, –≥–¥–µ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
 * @return string
 */
function payer_config_url_page() {
  return 'URL';
}

/**
 * Implement hook_theme().
 */
function payer_theme(){
  return array(
    'config_page_template' => array(
      // file name will be payer-config.tpl.php
      'template' => 'templates/payer-config',
      'variables' => array('page_data' => NULL),
    ),
  );
}

/**
 * –§–æ—Ä–º–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
 * @param $form
 *
 * @return mixed
 */
function payer_payment($form) {
  $form['#attributes'] = array('class' => array('payer-form-payment'));

  $form['payer_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#required' => TRUE,
    '#maxlength' => 30,
    '#element_validate' => array('element_validate_number'),
    '#weight' => -50,
    '#attributes' => array('class' => array('payer-amount')),
  );

  $form['payer_method'] = array(
    '#type' => 'fieldset',
    '#title' => t('Methods'),
    '#description' => t('Choose payment method'),
    '#weight' => -49,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
    '#attributes' => array('class' => array('payer-method')),
  );

  $existing_methods = payer_get_methods();

  $enabled_methods = array();

  foreach($existing_methods as $pay_method) {
    if(module_exists($pay_method->name)) {
      $info = drupal_parse_info_file($pay_method->uri);
      $image_preview = drupal_get_path('module', $pay_method->name) . '/preview.png';
      if(file_exists($image_preview)) {
        $image_preview = theme('image',
          array(
            'path' => $image_preview,
            'title' => 'Pay by ' . $info['name'],
            'alt' => $info['name'],
            'attributes' => array('class' => 'payer-method-preview'),
          )
        );
      }
      else {
        $image_preview = NULL;
      }
      $info['name'] = '<span class="payer-method-name">' . $info['name'] . '</span>';
      $enabled_methods[$pay_method->name] = $image_preview . $info['name'];
    }
  }

  $form['payer_method']['methods'] = array(
    '#title' => 'Methods',
    '#type' => 'radios',
    '#options' => $enabled_methods,
    '#required' => TRUE,
  );

  $form['actions'] = array(
    '#weight' => 50,
  );

  $form['actions']['custom_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Payment'),
  );

  $form['#submit'] = array('payer_payment_submit');

  return $form;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
 * @param $form
 * @param $form_state
 *
 * @return bool
 */
function payer_payment_submit($form, &$form_state)  {
  global $user;
  $amount = number_format($form_state['values']['payer_amount'], 2,'.', '');
  $method = $form_state['values']['methods'];

  $pay_handler = $method.'_handler';
  $pay_handler($user->uid, $amount);

  return TRUE;
}

/**
 * Implements hook_form_alter().
 */
function payer_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'events_pay_node_form') {
    if(
      !isset($form['#node']->events_pay_act)
      && !isset($form['#node']->events_pay_status)
      && !isset($form['#node']->events_pay_amount)
    ) {
      unset($form['title']);
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      $form['#validate'][] = 'payer_validate_event_pay_node';
      // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
      $form['actions']['submit']['#submit'] = array('payer_create_event_pay_node');
    }
    else {
      drupal_set_message(t('You can\'t edit an already created event'), 'warning');
      $form['title']['#disabled'] = TRUE;
      $form['events_pay_act']['#disabled'] = TRUE;
      $form['events_pay_status']['#disabled'] = TRUE;
      $form['events_pay_amount']['#disabled'] = TRUE;
      $form['events_pay_comment']['#disabled'] = TRUE;
      $form['actions']['submit']['#access'] = FALSE;
    }
  }

  if($form_id == 'user_profile_form') {
    $form['payer_wallet']['#access'] = FALSE;
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "events_pay"
 **/
function payer_validate_event_pay_node($form, &$form_state) {
  $act = $form_state['values']['events_pay_act']['und'][0]['value'];
  $status = $form_state['values']['events_pay_status']['und'][0]['value'];
  $amount = $form_state['values']['events_pay_amount']['und'][0]['value'];
  $user = user_load_by_name($form_state['values']['name']);
  $amount_wallet = field_get_items( 'user' , $user, 'payer_wallet' );
  $amount_wallet = $amount_wallet[0]['value'];

  if (isset($amount) && $act == 0 && ($amount_wallet - $amount) < 0) {
    form_set_error('events_pay_amount', t('Insufficient funds!'));
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "events_pay" –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 **/
function payer_create_event_pay_node($form, &$form_state) {
  $user = user_load_by_name($form_state['values']['name']);
  $vars = array(
    'uid' => $user->uid,
    'act' => $form_state['values']['events_pay_act']['und'][0]['value'],
    'status' => $form_state['values']['events_pay_status']['und'][0]['value'],
    'amount' => $form_state['values']['events_pay_amount']['und'][0]['value'],
    'comment' => $form_state['values']['events_pay_comment']['und'][0]['value'],
  );

  $event = new Payer($vars);
  $event->handler_event_pay();
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ payer/methods
 * @return array
 */
function payer_get_methods() {
  $dir_methods = DRUPAL_ROOT . '/' . drupal_get_path('module', 'payer') . '/methods' ;
  // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ .info –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.
  $existing_methods = file_scan_directory($dir_methods, '/.*\.info/');

  return $existing_methods;
}