<?php

/**
 * Implements hook_menu().
 */
function payer_menu() {
  $items = [];

  $items['admin/config/payer'] = array(
    'title' => 'Payer',
    'description' => 'Configure settings Payer.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'payer_config_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è Payer
 **/
function payer_config_page() {
  $dir_methods = DRUPAL_ROOT . '/' . drupal_get_path('module', 'payer') . '/methods' ;
  $existing_methods = file_scan_directory($dir_methods, '/.*\.info/');

  $rows = array();
  $headers = array(
    array('style' => array('width:20px')),
    array('data' => 'Method'),
    array('data' => 'Operations'),
  );

  foreach($existing_methods as $pay_method) {
    $config_link = NULL;
    $info = drupal_parse_info_file($pay_method->uri);
    $method_name = $pay_method->name;
    $enabled = module_exists($method_name) ? TRUE : FALSE;
    $description = '<h3>' . $info['name'] . '</h3>';
    $description .= '<p>' . $info['description'] . '</p>';

    if(!$enabled) {
      $description .= '<p>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã <b>"' . $info['name'] . '"</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤—ã–∫–ª—é—á–µ–Ω. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –º–æ–¥—É–ª—è, –≤–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ <a href="/admin/modules">–º–æ–¥—É–ª–µ–π</a> –≤ —Ä–∞–∑–¥–µ–ª–µ <b>"Payment"</b>.</p>';
      $enabled = 'üö´';
    }
    else {
      $enabled = '‚úÖ';
      $config_link = l('Config', $info['configure']);
    }

    $rows[$method_name]['data'] = array(
      $enabled,
      $description,
      $config_link,
    );
  }

  $page_data = array(
    'header'     => $headers,
    'rows'       => $rows,
    'sticky'     => TRUE,
    'empty'      => t('No results found'),
    'attributes' => array(),
    'caption'    => FALSE,
    'colgroups'  => array(),
  );

  return theme(
    'config_page_template',
    array('page_data' => $page_data)
  );
}

/**
 * Implement hook_theme().
 */
function payer_theme(){
  return array(
    'config_page_template' => array(
      // file name will be payer-config.tpl.php
      'template' => 'templates/payer-config',
      'variables' => array('page_data' => NULL),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function payer_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'events_pay_node_form') {
    if(
      !isset($form['#node']->events_pay_act)
      && !isset($form['#node']->events_pay_amount)) {
      unset($form['title']);
      $form['#validate'][] = 'payer_validate_event_pay_node';
      $form['actions']['submit']['#submit'] = array('payer_create_event_pay_node');
    }
    else {
      drupal_set_message('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ');
      $form['title']['#disabled'] = TRUE;
      $form['events_pay_act']['#disabled'] = TRUE;
      $form['events_pay_amount']['#disabled'] = TRUE;
      $form['events_pay_comment']['#disabled'] = TRUE;
      $form['actions']['submit']['#access'] = FALSE;
    }
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "events_pay"
 **/
function payer_validate_event_pay_node($form, &$form_state) {
  $act = $form_state['values']['events_pay_act']['und'][0]['value'];
  $amount = $form_state['values']['events_pay_amount']['und'][0]['value'];
  $user = user_load_by_name($form_state['values']['name']);
  $amount_wallet = field_get_items( 'user' , $user, 'payer_wallet' );
  $amount_wallet = $amount_wallet[0]['value'];

  if (isset($amount) && $act == 0 && ($amount_wallet - $amount) < 0) {
    form_set_error('events_pay_amount', t('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!'));
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "events_pay" –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 **/
function payer_create_event_pay_node($form, &$form_state) {
  $user = user_load_by_name($form_state['values']['name']);
  $vars = array(
    'uid' => $user->uid,
    'act' => $form_state['values']['events_pay_act']['und'][0]['value'],
    'amount' => $form_state['values']['events_pay_amount']['und'][0]['value'],
    'comment' => $form_state['values']['events_pay_comment']['und'][0]['value'],
  );

  $event = new Payer($vars);
  $event->handler_event_pay();
}