<?php

/**
 * Implements hook_menu().
 */
function payer_robokassa_menu() {
  $items = array();

  $urls = array(
    'result' => variable_get('payer_robokassa_url_result'),
    'success' => variable_get('payer_robokassa_url_success'),
    'fail' => variable_get('payer_robokassa_url_fail')
  );

  $items['admin/config/payer/robokassa'] = array(
    'title' => 'Robokassa',
    'description' => 'Configure settings Payer Robokassa.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payer_robokassa_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  $items['payer/robokassa'] = array(
    'title' => 'Robokassa',
    'description' => 'Payment Robokassa.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payer_robokassa_payment'),
    'access callback' => TRUE,
  );

  $items[$urls['result']] = array(
    'title' => 'Robokassa Result',
    'type' => MENU_CALLBACK,
    'page callback' => 'payer_robokassa_result_page',
    'access callback' => TRUE,
  );

  $items[$urls['success']] = array(
    'title' => 'Robokassa Success',
    'type' => MENU_CALLBACK,
    'page callback' => 'payer_robokassa_success_page',
    'access callback' => TRUE,
  );

  $items[$urls['fail']] = array(
    'title' => 'Robokassa Fail',
    'type' => MENU_CALLBACK,
    'page callback' => 'payer_robokassa_fail_page',
    'access callback' => TRUE,
  );

  return $items;
}

function payer_robokassa_settings($form) {
  $image = drupal_get_path('module', 'payer_robokassa') . '/preview.png';
  if(file_exists($image)) {
    $form['#prefix'] = theme('image', array('path' => $image));
  }

  /**
   * Обертка для основных параметров
   */
  $form['main_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main settings'),
    '#description' => t('Main settings for Robokassa payment gateway'),
    '#weight' => 1,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
  );

  $form['main_settings']['payer_robokassa_merchant_login'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant login'),
    '#description' => t('Paste the store ID here'),
    '#default_value' => variable_get('payer_robokassa_merchant_login', ''),
    '#maxlength' => 255,
  );
  $form['main_settings']['payer_robokassa_password_1'] = array(
    '#type' => 'password',
    '#title' => t('Password 1'),
    '#description' => variable_get('payer_robokassa_password_1')? t('Password set, but not displayed for security reasons'):NULL,
    '#maxlength' => 64,
  );

  $form['main_settings']['payer_robokassa_password_2'] = array(
    '#type' => 'password',
    '#title' => t('Password 2'),
    '#description' => variable_get('payer_robokassa_password_2')? t('Password set, but not displayed for security reasons'):NULL,
    '#maxlength' => 64,
  );

  /**
   * Обертка для URL's
   */
  $form['main_settings']['urls'] = array(
    '#type' => 'fieldset',
    '#title' => t('URL\'s'),
    '#description' => t('Use a relative path and don\'t add a trailing slash or the URL won\'t work.'),
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
  );

  $form['main_settings']['urls']['payer_robokassa_url_result'] = array(
    '#type' => 'textfield',
    '#title' => t('URL result'),
    '#description' => t('It is recommended that you periodically change this URL.'),
    '#field_prefix' => $_SERVER['SERVER_NAME'] . '/',
    '#default_value' => variable_get('payer_robokassa_url_result'),
    '#maxlength' => 255,
  );

  $form['main_settings']['urls']['payer_robokassa_url_success'] = array(
    '#type' => 'textfield',
    '#title' => t('URL success'),
    '#field_prefix' => $_SERVER['SERVER_NAME'] . '/',
    '#default_value' => variable_get('payer_robokassa_url_success'),
    '#maxlength' => 255,
  );

  $form['main_settings']['urls']['payer_robokassa_url_fail'] = array(
    '#type' => 'textfield',
    '#title' => t('URL fail'),
    '#field_prefix' => $_SERVER['SERVER_NAME'] . '/',
    '#default_value' => variable_get('payer_robokassa_url_fail'),
    '#maxlength' => 255,
  );

  /**
   * Обертка для тестовых параметров
   */
  $form['test_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test settings'),
    '#description' => t('Test settings for Robokassa payment gateway'),
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
  );

  $form['test_settings']['payer_robokassa_test_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable test mode'),
    '#default_value' => variable_get('payer_robokassa_test_enabled', '0'),
  );

  $form['test_settings']['payer_robokassa_test_password_1'] = array(
    '#type' => 'textfield',
    '#title' => t('Test password 1'),
    '#default_value' => variable_get('payer_robokassa_test_password_1', ''),
    '#maxlength' => 255,
  );

  $form['test_settings']['payer_robokassa_test_password_2'] = array(
    '#type' => 'textfield',
    '#title' => t('Test password 2'),
    '#default_value' => variable_get('payer_robokassa_test_password_2', ''),
    '#maxlength' => 255,
  );

  $form = system_settings_form($form);

  $form['#validate'][] = 'payer_robokassa_settings_validate';

  // Нужно установить свой обработчик выше системного, для того, чтобы произвести
  // дейсвия с переменными и меню, до того, как форма будет записана в базу
  array_unshift($form['#submit'], 'payer_robokassa_settings_submit');

  return $form;
}

function payer_robokassa_settings_validate($form, &$form_state) {

}

function payer_robokassa_settings_submit($form, &$form_state) {
  $urls = array(
    'result' => variable_get('payer_robokassa_url_result'),
    'success' => variable_get('payer_robokassa_url_success'),
    'fail' => variable_get('payer_robokassa_url_fail'),
  );

  // При не заполненном пароле, убираем значение поля, чтобы не сохранялось
  if(empty($form_state['values']['payer_robokassa_password_1'])) {
    unset($form_state['values']['payer_robokassa_password_1']);
  }
  if(empty($form_state['values']['payer_robokassa_password_2'])) {
    unset($form_state['values']['payer_robokassa_password_2']);
  }

  // Если любой из url отличается, перестраиваем меню.
  if(
    $form_state['values']['payer_robokassa_url_result'] != $urls['result']
    || $form_state['values']['payer_robokassa_url_success'] != $urls['success']
    || $form_state['values']['payer_robokassa_url_fail'] != $urls['fail']
  ) {
    menu_rebuild();
    drupal_set_message(t('The menu has been rebuilt.'));
  }
}

function payer_robokassa_payment($form) {
  $form['OutSum'] = array(
    '#type' => 'textfield',
    '#title' => t('Summ'),
    '#required' => TRUE,
    '#maxlength' => 255,
    '#element_validate' => array('element_validate_number'),
  );

  $form['actions']['custom_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Payment'),
  );

  $form['#submit'] = array('payer_robokassa_payment_submit');

  return $form;
}

function payer_robokassa_payment_submit($form, &$form_state)  {
  global $user;
  $out_summ = number_format($form_state['values']['OutSum'], 2,'.', '');
  $mrh_login = variable_get('payer_robokassa_merchant_login');
  $test_mode = variable_get('payer_robokassa_test_enabled');

  // registration info (password #1)
  if(!$test_mode) {
    $test_mode = NULL;
    $mrh_pass1 = variable_get('payer_robokassa_password_1');
  }
  else {
    $test_mode = '&IsTest=1';
    $mrh_pass1 = variable_get('payer_robokassa_test_password_1');
  }

  $vars = array(
    'uid' => $user->uid,
    'act' => 1,
    'status' => 0,
    'amount' => $out_summ,
    'comment' => 'Robokassa',
  );

  $event = new Payer($vars);
  $event->handler_event_pay();
  $inv_id = $event->pay_id;
  // build CRC value
  $crc  = md5("$mrh_login:$out_summ:$inv_id:$mrh_pass1");
  dpm($crc);

  //drupal_goto("https://auth.robokassa.ru/Merchant/Index.aspx?$test_mode&MrchLogin=$mrh_login&OutSum=$out_summ&InvId=$inv_id&SignatureValue=$crc");

}

function payer_robokassa_result_page() {
  $test_mode = variable_get('payer_robokassa_test_enabled');
  if(!$test_mode) {
    $mrh_pass2 = variable_get('payer_robokassa_password_2');
  }
  else {
    $mrh_pass2 = variable_get('payer_robokassa_test_password_2');
  }

  // HTTP parameters:
  $out_summ = isset($_REQUEST['OutSum']) ? $_REQUEST['OutSum'] : NULL;
  $inv_id = isset($_REQUEST['InvId']) ? $_REQUEST['InvId'] : NULL;
  $crc = isset($_REQUEST['SignatureValue']) ? $_REQUEST['SignatureValue'] : NULL;

  $crc = strtoupper($crc);  // force uppercase
  // build own CRC
  $my_crc = strtoupper(md5("$out_summ:$inv_id:$mrh_pass2"));

  if ($my_crc == $crc && !empty($inv_id)) {
    $event = Payer::get_event_pay_node($inv_id);
    Payer::set_event_pay_status($inv_id, '1');
    /**
     * Логику с получением суммы из счета вынести в класс Payer в static
     */
    $amount = field_get_items( 'node' , $event, 'events_pay_amount' );
    $amount = $amount[0]['value'];
    $user = Payer::get_user_object($event->uid);
    $score = Payer::get_user_balance($user);
    $balance = Payer::calc_balance_user('1', $score, $amount);
    Payer::set_user_balance($user, $balance);
    print 'OK';
    die();
  }

  drupal_not_found();
}

function payer_robokassa_success_page() {
  // registration info (password #1)
  $test_mode = variable_get('payer_robokassa_test_enabled');
  if(!$test_mode) {
    $mrh_pass1 = variable_get('payer_robokassa_password_1');
  }
  else {
    $mrh_pass1 = variable_get('payer_robokassa_test_password_1');
  }

  // HTTP parameters:
  $out_summ = isset($_REQUEST['OutSum']) ? $_REQUEST['OutSum'] : NULL;
  $inv_id = isset($_REQUEST['InvId']) ? $_REQUEST['InvId'] : NULL;
  $crc = isset($_REQUEST['SignatureValue']) ? $_REQUEST['SignatureValue'] : NULL;
  $uid = isset($_REQUEST['Shp_uid']) ? $_REQUEST['Shp_uid'] : NULL;

  // build own CRC
  $crc = strtoupper($crc);  // force uppercase
  $my_crc = strtoupper(md5("$out_summ:$inv_id:$mrh_pass1:Shp_uid=$uid"));

  if ($my_crc != $crc) {
    drupal_not_found();
    return FALSE;
  }

  // OK, payment proceeds
  return t('Thank you for using our service');
}

function payer_robokassa_fail_page() {
  return t('You have refused payment.');
}